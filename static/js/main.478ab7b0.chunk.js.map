{"version":3,"sources":["Constants.js","Cell.js","OverGrid.js","Grid.js","Options.js","App.js","serviceWorker.js","index.js"],"names":["OPTIONS","COLORS","CellDiv","styled","div","props","size","background","Cell","x","y","className","onClick","option","cells","setCells","temp","tempElem","eraseClick","oldColor","tempMatrix","fillClick","color","width","height","element","dimensions","brushClick","setColor","dropperClick","selectorClick","onMouseUp","setMouseDown","onMouseDown","onMouseEnter","position","setCurrentCell","selectorOver","mouseDown","cell","undefined","eraseOver","fillOver","brushOver","dropperOver","Grid","useState","Array","fill","map","currentCell","onMouseLeave","onMouseOver","rows","Options","Message","colors","style","onChange","hex","SelectorGrid","setOption","BoardGrid","SelectedColor","SelectedDiv","Header","Button","active","Users","MessageList","USERS","user","index","User","fontWeight","name","ChatMessage","Chat","MESSAGES","message","Input","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.478ab7b0.chunk.js","sourcesContent":["export const OPTIONS = {\r\n    ERASE: 'erase',\r\n    FILL: 'fill',\r\n    BRUSH: 'brush',\r\n    DROPPER: 'dropper',\r\n    EMPTY: 'empty'\r\n}\r\n\r\nexport const BASECOLOR = \"#FFFFFF\";\r\nexport const COLORS = ['#B80000', '#DB3E00', '#FCCB00', '#008B02', '#006B76', '#1273DE', \r\n                       '#004DCF', '#5300EB', '#EB9694', '#FAD0C3', '#FEF3BD', '#C1E1C5', \r\n                       '#BEDADC', '#C4DEF6', '#BED3F3', '#D4C4FB', '#FFF', '#000']\r\n","import styled from 'styled-components';\r\nimport React from 'react';\r\nimport { OPTIONS, BASECOLOR } from './Constants';\r\n\r\nexport const CellDiv = styled.div`\r\n  width: ${props => props.size + \"%\"};\r\n  padding-bottom: ${props => props.size + \"%\"};\r\n  background: ${props => props.background};\r\n`\r\nexport function Cell(props){\r\n  return (\r\n    <CellDiv x={props.x} y={props.y} className=\"cell\" size={props.size} background={props.background} \r\n      onClick={() => selectorClick(props)} \r\n      onMouseUp={() => props.setMouseDown(false)}\r\n      onMouseDown={() => props.setMouseDown(true)} \r\n      onMouseEnter={() => {\r\n        let position = {x: props.x, y: props.y};\r\n        props.setCurrentCell(position);\r\n      }}>\r\n    </CellDiv>\r\n  )\r\n}\r\n\r\nfunction selectorClick(props) {\r\n    switch (props.option) {\r\n        case OPTIONS.ERASE:\r\n            eraseClick(props.x, props.y, props.cells, props.setCells)\r\n            break;\r\n        case OPTIONS.FILL:\r\n            let oldColor = props.cells[props.x][props.y].background;\r\n            let tempMatrix = [...props.cells];\r\n            fillClick(props.x, props.y, tempMatrix, props.color, oldColor, props.dimensions.width, props.dimensions.height)\r\n            props.setCells(tempMatrix);\r\n            break;\r\n        case OPTIONS.BRUSH:\r\n            brushClick(props.x, props.y, props.cells, props.setCells, props.color);\r\n            break;\r\n        case OPTIONS.DROPPER:\r\n            dropperClick(props.x, props.y, props.cells, props.setColor)\r\n            break;\r\n    }\r\n}\r\n\r\nfunction brushClick(x, y, cells, setCells, color){\r\n  let temp = [...cells];\r\n  let tempElem = temp[x][y];\r\n  tempElem = {...tempElem, background: color}\r\n  temp[x][y] = tempElem;\r\n  setCells(temp);\r\n}\r\n\r\n\r\nfunction fillClick(x, y, cells, color, oldColor, width, height) {\r\n    if (x < 0 || x >= width || y < 0 || y >= height){\r\n        return; \r\n    }\r\n    let element = cells[x][y];\r\n    if(element.background != oldColor){\r\n        return;\r\n    }\r\n    if(element.background == color){\r\n        return;\r\n    }\r\n    element.background = color;\r\n    fillClick(x+1, y, cells, color, oldColor, width, height);\r\n    fillClick(x-1, y, cells, color, oldColor, width, height);\r\n    fillClick(x, y+1, cells, color, oldColor, width, height);\r\n    fillClick(x, y-1, cells, color, oldColor, width, height);\r\n}\r\n\r\nfunction eraseClick(x, y, cells, setCells) {\r\n    let temp = [...cells];\r\n    let tempElem = temp[x][y];\r\n    tempElem = { ...tempElem, background: BASECOLOR };\r\n    temp[x][y] = tempElem;\r\n    setCells(temp);\r\n}\r\n\r\nfunction dropperClick(x, y, cells, setColor) {\r\n    let element = cells[x][y];\r\n    let color = element.background;\r\n    setColor(color);\r\n}\r\n\r\n\r\n","import { OPTIONS, BASECOLOR } from './Constants';\r\nexport function selectorOver(option, mouseDown, cell, cells, setCells, color, setColor, dimensions) {\r\n    if (mouseDown) {\r\n        switch (option) {\r\n            case OPTIONS.ERASE:\r\n                eraseOver(cell, cells, setCells);\r\n                break;\r\n            case OPTIONS.FILL:\r\n                let oldColor = cells[cell.x][cell.y].background;\r\n                let tempMatrix = [...cells];\r\n                fillOver(cell.x, cell.y, tempMatrix, color, oldColor, dimensions.width, dimensions.height);\r\n                setCells(tempMatrix);\r\n                break;\r\n            case OPTIONS.BRUSH:\r\n                brushOver(cell, cells, setCells, color);\r\n                break;\r\n            case OPTIONS.DROPPER:\r\n                dropperOver(cell, cells, setColor);\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nfunction brushOver(cell, cells, setCells, color) {\r\n    if (cell != null && cell != undefined) {\r\n        let temp = [...cells];\r\n        let tempElem = temp[cell.x][cell.y];\r\n        tempElem = { ...tempElem, background: color };\r\n        temp[cell.x][cell.y] = tempElem;\r\n        setCells(temp);\r\n    }\r\n}\r\n\r\nfunction fillOver(x, y, cells, color, oldColor, width, height) {\r\n    if (x < 0 || x >= width || y < 0 || y >= height){\r\n        return; \r\n    }\r\n    let element = cells[x][y];\r\n    if(element.background != oldColor){\r\n        return;\r\n    }\r\n    if(element.background == color){\r\n        return;\r\n    }\r\n    element.background = color;\r\n    fillOver(x+1, y, cells, color, oldColor, width, height);\r\n    fillOver(x-1, y, cells, color, oldColor, width, height);\r\n    fillOver(x, y+1, cells, color, oldColor, width, height);\r\n    fillOver(x, y-1, cells, color, oldColor, width, height);\r\n}\r\n\r\nfunction eraseOver(cell, cells, setCells) {\r\n    if (cell != null && cell != undefined) {\r\n        let temp = [...cells];\r\n        let tempElem = temp[cell.x][cell.y];\r\n        tempElem = { ...tempElem, background: BASECOLOR };\r\n        temp[cell.x][cell.y] = tempElem;\r\n        setCells(temp);\r\n    }\r\n}\r\n\r\nfunction dropperOver(cell, cells, setColor) {\r\n    if (cell != null && cell != undefined) {\r\n        let element = cells[cell.x][cell.y];\r\n        let color = element.background;\r\n        setColor(color);\r\n    }\r\n}\r\n\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport { Cell } from './Cell';\nimport {selectorOver} from './OverGrid'\n\nexport function Grid(props) {\n    let [cells, setCells] = useState(Array(15).fill().map(() => Array(15).fill({ background: \"black\" })));\n    let [dimensions, setDimensions] = useState({ width: 15, height: 15 });\n    let [currentCell, setCurrentCell] = useState({})\n    let [mouseDown, setMouseDown] = useState(false);\n\n    return (\n        <div className=\"outergrid\">\n            <div className=\"grid\" \n                onMouseLeave={() => setMouseDown(false)}\n                onMouseOver={() => selectorOver(props.option, mouseDown, currentCell, cells, setCells, props.color, props.setColor, dimensions)}>\n                {cells.map((rows, x) => (\n                    <div className=\"row\">\n                        {rows.map((cell, y) => (\n                            <Cell \n                                option={props.option}\n                                setCurrentCell={setCurrentCell}\n                                setColor={props.setColor}\n                                currentCell={currentCell}\n                                setMouseDown={setMouseDown}\n                                color={props.color}\n                                cells={cells}\n                                setCells={setCells}\n                                x={x} y={y}\n                                dimensions={dimensions}\n                                background={cell.background}\n                                size={(100 / dimensions.width)} />\n                        ))}\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\n\n","import { GithubPicker } from 'react-color';\r\nimport {Button, Message} from 'semantic-ui-react';\r\nimport React from 'react';\r\nimport styled from 'styled-components';\r\nimport { OPTIONS, COLORS, BASECOLOR } from './Constants';\r\n\r\nexport function Options(props){\r\n    return (\r\n      <Message className=\"Options\">\r\n        <GithubPicker colors={COLORS} style={{width: \"20vw\"}} onChange={(color) => props.setColor(color.hex)}/>\r\n        <SelectorGrid option={props.option} setOption={props.setOption}/>\r\n        <BoardGrid/>\r\n        <SelectedColor color={props.color}/>\r\n      </Message>\r\n    )\r\n  }\r\n\r\nexport const SelectedDiv = styled.div`\r\n  width: ${props => props.size + \"vw\"};\r\n  padding-bottom: ${props => props.size + \"vw\"};\r\n  background: ${props => props.color};\r\n  border: 2px solid grey;\r\n`\r\n\r\nfunction SelectedColor(props){\r\n  return (\r\n    <Message style={{width: \"7vw\"}}>\r\n      SELECTED: \r\n      <SelectedDiv size={5} color={props.color}>\r\n      </SelectedDiv>\r\n    </Message>\r\n  )\r\n}\r\n\r\nfunction BoardGrid(props){ \r\n  return (\r\n    <Message style={{width: \"20vw\"}}>\r\n      <Message.Header>Board Options</Message.Header>\r\n      <Button>Empty</Button>\r\n      <Button>Redo</Button>\r\n      <Button>Undo</Button>\r\n      <Button>Rotate</Button>\r\n    </Message>\r\n  )\r\n}\r\n\r\nfunction SelectorGrid(props){ \r\n  return (\r\n    <Message style={{width: \"20vw\"}}>\r\n      <Message.Header>Selector Options</Message.Header>\r\n      {props.option == OPTIONS.ERASE ? <Button active onClick={() => props.setOption(OPTIONS.ERASE)}>Erase</Button> : <Button onClick={() => props.setOption(OPTIONS.ERASE)}>Erase</Button>}\r\n      {props.option == OPTIONS.FILL ? <Button active onClick={() => props.setOption(OPTIONS.FILL)}>Fill</Button> : <Button onClick={() => props.setOption(OPTIONS.FILL)}>Fill</Button>}\r\n      {props.option == OPTIONS.BRUSH ? <Button active onClick={() => props.setOption(OPTIONS.BRUSH)}>Brush</Button> : <Button onClick={() => props.setOption(OPTIONS.BRUSH)}>Brush</Button>}\r\n      {props.option == OPTIONS.DROPPER ? <Button active onClick={() => props.setOption(OPTIONS.DROPPER)}>Dropper</Button> : <Button onClick={() => props.setOption(OPTIONS.DROPPER)}>Dropper</Button>}\r\n    </Message>\r\n  )\r\n}","import React, {useState} from 'react';\nimport './App.css';\nimport { GithubPicker } from 'react-color';\nimport {Button, Message, Input} from 'semantic-ui-react';\nimport {Grid} from './Grid';\nimport styled from 'styled-components';\nimport 'semantic-ui-css/semantic.min.css';\nimport {Options} from './Options';\nimport USERS from './Users.json';\nimport MESSAGES from './Messages.json';\nimport { OPTIONS, COLORS, BASECOLOR } from './Constants';\n\nfunction App() {\n  let [color, setColor] = useState(BASECOLOR);\n  let [messages, setMessages] = useState([]);\n  let [users, setUsers] = useState([]);\n  let [option, setOption] = useState(OPTIONS.BRUSH);\n\n  return (\n    <div className=\"App\">\n      <Options color={color} setColor={setColor} option={option} setOption={setOption}/>\n      <Grid option={option} setColor={setColor} color={color}/>\n      <Chat/>\n      <Users/>\n    </div>\n  );\n}\n\nfunction Users(){\n  return (\n    <MessageList className=\"Users\">\n      {USERS.map((user, index) => (\n          <User> <span style={{fontWeight: 'bold'}}>{user.name}</span></User>\n      ))}\n    </MessageList>\n  )\n}\n\nexport const MessageList = styled(Message)`\n  margin: 0 !important;\n  padding: 1vh !important;\n`\n\nexport const ChatMessage = styled(Message)`\n  margin: 0 !important;\n  line-height: 1.5px !important;\n`\n\nexport const User = styled(Message)`\n  margin: 0 !important;\n  line-height: 1.5px !important;\n`\n\nfunction Chat(){\n  return (\n    <MessageList className=\"Chat\">\n      <div className=\"message-list\">\n        {MESSAGES.map((message, index) => (\n          <ChatMessage className=\"guess-message\"> <span style={{fontWeight: 'bold'}}>{message.name}</span>: {message.message}</ChatMessage>\n        ))}\n      </div>\n      <Input className=\"guess-input\" placeholder=\"Enter your guess.\"/>\n    </MessageList>\n  )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}